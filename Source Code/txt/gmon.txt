Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls   s/call   s/call  name    
 28.72    855.58   855.58    64298     0.01     0.01  conv2d_mt(mt_arg*)
 19.16   1426.40   570.81                             _init
 18.35   1973.22   546.83 56493420417     0.00     0.00  get_idx(int, int, int)
 14.09   2393.12   419.89                             get_decimals(int)
  7.48   2615.99   222.87    41877     0.01     0.01  matmul_mt(mt_arg*)
  3.60   2723.25   107.26    62654     0.00     0.00  relu_mt(mt_arg*)
  3.03   2813.56    90.31    63705     0.00     0.00  maxpool_mt(mt_arg*)
  3.03   2903.72    90.15    62950     0.00     0.00  biasing_mt(mt_arg*)
  1.05   2934.99    31.27     8100     0.00     0.01  io_to_matrix(char const*)
  0.65   2954.39    19.40    15031     0.00     0.00  flatten_mt(mt_arg*)
  0.50   2969.24    14.85    71034     0.00     0.00  transpose_mt(mt_arg*)
  0.39   2980.74    11.51     9360     0.00     0.01  malloc_matrix(int, int)
  0.01   2980.97     0.23                             start_mt(void*)
  0.00   2981.11     0.14   587052     0.00     0.00  wait_mt()
  0.00   2981.14     0.03     7680     0.00     0.00  relu(matrix**, int, matrix**)
  0.00   2981.16     0.02     7680     0.00     0.00  conv2d(matrix*, matrix**, int, matrix**)
  0.00   2981.18     0.02     7680     0.00     0.00  maxpool(matrix**, int, matrix**)
  0.00   2981.20     0.02                             main
  0.00   2981.21     0.01   911671     0.00     0.00  push_mt(mt_arg*)
  0.00   2981.22     0.01    53733     0.00     0.00  add_mt(mt_arg*)
  0.00   2981.23     0.01    15360     0.00     0.00  transpose(matrix*, matrix*)
  0.00   2981.24     0.01     7680     0.00     0.00  biasing(matrix**, int, matrix*, matrix**)
  0.00   2981.25     0.01       60     0.00     1.81  malloc_io()
  0.00   2981.25     0.01      240     0.00     0.00  free_matrix_ptr(matrix**, int)
  0.00   2981.25     0.00     9360     0.00     0.00  free_matrix(matrix*)
  0.00   2981.25     0.00     7800     0.00     0.00  get_value(char const*)
  0.00   2981.25     0.00     7680     0.00     0.00  index_of_max_element(matrix*)
  0.00   2981.25     0.00     7680     0.00     0.00  add(matrix*, matrix*, matrix*)
  0.00   2981.25     0.00     7680     0.00     0.00  matmul(matrix*, matrix*, matrix*)
  0.00   2981.25     0.00     7680     0.00     0.00  flatten(matrix**, int, matrix*)
  0.00   2981.25     0.00      431     0.00     0.00  stop_mt(mt_arg*)
  0.00   2981.25     0.00      360     0.00     0.00  stop_timer()
  0.00   2981.25     0.00      360     0.00     0.00  delta_time_us(timeval, timeval)
  0.00   2981.25     0.00      300     0.00     0.00  start_timer()
  0.00   2981.25     0.00      240     0.00     0.02  malloc_matrix_ptr(int, int, int)
  0.00   2981.25     0.00       60     0.00     0.00  free_io(io*)
  0.00   2981.25     0.00       60     0.00     0.00  join_mt()
  0.00   2981.25     0.00       60     0.00     0.00  create_mt(long)

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.

 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012-2024 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 0.00% of 2981.25 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]     62.9    0.23 1874.80                 start_mt(void*) [1]
              855.58   73.55   64298/64298       conv2d_mt(mt_arg*) [2]
              222.87   68.34   41877/41877       matmul_mt(mt_arg*) [6]
              107.26   97.26   62654/62654       relu_mt(mt_arg*) [7]
               90.15   93.57   62950/62950       biasing_mt(mt_arg*) [8]
               90.31   69.84   63705/63705       maxpool_mt(mt_arg*) [9]
               19.40   36.46   15031/15031       flatten_mt(mt_arg*) [13]
               14.85   35.32   71034/71034       transpose_mt(mt_arg*) [15]
                0.01    0.01   53733/53733       add_mt(mt_arg*) [21]
                0.00    0.00     431/431         stop_mt(mt_arg*) [36]
-----------------------------------------------
              855.58   73.55   64298/64298       start_mt(void*) [1]
[2]     31.2  855.58   73.55   64298         conv2d_mt(mt_arg*) [2]
               73.54    0.00 7597033799/56493420417     get_idx(int, int, int) [4]
                0.02    0.00   73480/587052      wait_mt() [17]
-----------------------------------------------
                                                 <spontaneous>
[3]     19.1  570.81    0.00                 _init [3]
-----------------------------------------------
                0.00    0.00   84480/56493420417     index_of_max_element(matrix*) [29]
                0.00    0.00  224599/56493420417     add_mt(mt_arg*) [21]
               32.29    0.00 3335883703/56493420417     io_to_matrix(char const*) [12]
               35.31    0.00 3647564283/56493420417     transpose_mt(mt_arg*) [15]
               36.46    0.00 3766480100/56493420417     flatten_mt(mt_arg*) [13]
               40.28    0.00 4161873091/56493420417     malloc_matrix(int, int) [14]
               68.33    0.00 7059180182/56493420417     matmul_mt(mt_arg*) [6]
               69.82    0.00 7213374948/56493420417     maxpool_mt(mt_arg*) [9]
               73.54    0.00 7597033799/56493420417     conv2d_mt(mt_arg*) [2]
               93.56    0.00 9665523280/56493420417     biasing_mt(mt_arg*) [8]
               97.24    0.00 10046197952/56493420417     relu_mt(mt_arg*) [7]
[4]     18.3  546.83    0.00 56493420417         get_idx(int, int, int) [4]
-----------------------------------------------
                                                 <spontaneous>
[5]     14.1  419.89    0.00                 get_decimals(int) [5]
-----------------------------------------------
              222.87   68.34   41877/41877       start_mt(void*) [1]
[6]      9.8  222.87   68.34   41877         matmul_mt(mt_arg*) [6]
               68.33    0.00 7059180182/56493420417     get_idx(int, int, int) [4]
                0.01    0.00   42193/587052      wait_mt() [17]
-----------------------------------------------
              107.26   97.26   62654/62654       start_mt(void*) [1]
[7]      6.9  107.26   97.26   62654         relu_mt(mt_arg*) [7]
               97.24    0.00 10046197952/56493420417     get_idx(int, int, int) [4]
                0.02    0.00   70940/587052      wait_mt() [17]
-----------------------------------------------
               90.15   93.57   62950/62950       start_mt(void*) [1]
[8]      6.2   90.15   93.57   62950         biasing_mt(mt_arg*) [8]
               93.56    0.00 9665523280/56493420417     get_idx(int, int, int) [4]
                0.02    0.00   69199/587052      wait_mt() [17]
-----------------------------------------------
               90.31   69.84   63705/63705       start_mt(void*) [1]
[9]      5.4   90.31   69.84   63705         maxpool_mt(mt_arg*) [9]
               69.82    0.00 7213374948/56493420417     get_idx(int, int, int) [4]
                0.02    0.00   66963/587052      wait_mt() [17]
-----------------------------------------------
                                                 <spontaneous>
[10]     3.9    0.02  115.49                 main [10]
                0.01  108.38      60/60          malloc_io() [11]
                0.00    5.31     240/240         malloc_matrix_ptr(int, int, int) [16]
                0.37    1.29     300/9360        malloc_matrix(int, int) [14]
                0.03    0.01    7680/7680        relu(matrix**, int, matrix**) [18]
                0.02    0.01    7680/7680        maxpool(matrix**, int, matrix**) [19]
                0.02    0.01    7680/7680        conv2d(matrix*, matrix**, int, matrix**) [20]
                0.01    0.01    7680/7680        biasing(matrix**, int, matrix*, matrix**) [22]
                0.01    0.00   15360/15360       transpose(matrix*, matrix*) [23]
                0.01    0.00     240/240         free_matrix_ptr(matrix**, int) [25]
                0.00    0.00    7680/7680        add(matrix*, matrix*, matrix*) [26]
                0.00    0.00    7680/7680        matmul(matrix*, matrix*, matrix*) [27]
                0.00    0.00    7680/7680        flatten(matrix**, int, matrix*) [28]
                0.00    0.00    7680/7680        index_of_max_element(matrix*) [29]
                0.00    0.00      60/60          join_mt() [30]
                0.00    0.00     360/360         stop_timer() [37]
                0.00    0.00     360/360         delta_time_us(timeval, timeval) [38]
                0.00    0.00     300/300         start_timer() [39]
                0.00    0.00     300/9360        free_matrix(matrix*) [34]
                0.00    0.00      60/60          create_mt(long) [41]
                0.00    0.00      60/60          free_io(io*) [40]
-----------------------------------------------
                0.01  108.38      60/60          main [10]
[11]     3.6    0.01  108.38      60         malloc_io() [11]
               31.27   77.11    8100/8100        io_to_matrix(char const*) [12]
                0.00    0.00    7800/7800        get_value(char const*) [35]
-----------------------------------------------
               31.27   77.11    8100/8100        malloc_io() [11]
[12]     3.6   31.27   77.11    8100         io_to_matrix(char const*) [12]
                9.96   34.86    8100/9360        malloc_matrix(int, int) [14]
               32.29    0.00 3335883703/56493420417     get_idx(int, int, int) [4]
-----------------------------------------------
               19.40   36.46   15031/15031       start_mt(void*) [1]
[13]     1.9   19.40   36.46   15031         flatten_mt(mt_arg*) [13]
               36.46    0.00 3766480100/56493420417     get_idx(int, int, int) [4]
                0.00    0.00   17259/587052      wait_mt() [17]
-----------------------------------------------
                0.37    1.29     300/9360        main [10]
                1.18    4.13     960/9360        malloc_matrix_ptr(int, int, int) [16]
                9.96   34.86    8100/9360        io_to_matrix(char const*) [12]
[14]     1.7   11.51   40.28    9360         malloc_matrix(int, int) [14]
               40.28    0.00 4161873091/56493420417     get_idx(int, int, int) [4]
-----------------------------------------------
               14.85   35.32   71034/71034       start_mt(void*) [1]
[15]     1.7   14.85   35.32   71034         transpose_mt(mt_arg*) [15]
               35.31    0.00 3647564283/56493420417     get_idx(int, int, int) [4]
                0.02    0.00   73685/587052      wait_mt() [17]
-----------------------------------------------
                0.00    5.31     240/240         main [10]
[16]     0.2    0.00    5.31     240         malloc_matrix_ptr(int, int, int) [16]
                1.18    4.13     960/9360        malloc_matrix(int, int) [14]
-----------------------------------------------
                0.00    0.00    5445/587052      flatten(matrix**, int, matrix*) [28]
                0.00    0.00    6989/587052      matmul(matrix*, matrix*, matrix*) [27]
                0.00    0.00    7382/587052      add(matrix*, matrix*, matrix*) [26]
                0.00    0.00   12961/587052      transpose(matrix*, matrix*) [23]
                0.00    0.00   17259/587052      flatten_mt(mt_arg*) [13]
                0.00    0.00   20769/587052      conv2d(matrix*, matrix**, int, matrix**) [20]
                0.00    0.00   21681/587052      biasing(matrix**, int, matrix*, matrix**) [22]
                0.01    0.00   21931/587052      maxpool(matrix**, int, matrix**) [19]
                0.01    0.00   22070/587052      relu(matrix**, int, matrix**) [18]
                0.01    0.00   42193/587052      matmul_mt(mt_arg*) [6]
                0.01    0.00   54105/587052      add_mt(mt_arg*) [21]
                0.02    0.00   66963/587052      maxpool_mt(mt_arg*) [9]
                0.02    0.00   69199/587052      biasing_mt(mt_arg*) [8]
                0.02    0.00   70940/587052      relu_mt(mt_arg*) [7]
                0.02    0.00   73480/587052      conv2d_mt(mt_arg*) [2]
                0.02    0.00   73685/587052      transpose_mt(mt_arg*) [15]
[17]     0.0    0.14    0.00  587052         wait_mt() [17]
-----------------------------------------------
                0.03    0.01    7680/7680        main [10]
[18]     0.0    0.03    0.01    7680         relu(matrix**, int, matrix**) [18]
                0.01    0.00   22070/587052      wait_mt() [17]
                0.00    0.00  169863/911671      push_mt(mt_arg*) [24]
-----------------------------------------------
                0.02    0.01    7680/7680        main [10]
[19]     0.0    0.02    0.01    7680         maxpool(matrix**, int, matrix**) [19]
                0.01    0.00   21931/587052      wait_mt() [17]
                0.00    0.00  169195/911671      push_mt(mt_arg*) [24]
-----------------------------------------------
                0.02    0.01    7680/7680        main [10]
[20]     0.0    0.02    0.01    7680         conv2d(matrix*, matrix**, int, matrix**) [20]
                0.00    0.00   20769/587052      wait_mt() [17]
                0.00    0.00  158463/911671      push_mt(mt_arg*) [24]
-----------------------------------------------
                0.01    0.01   53733/53733       start_mt(void*) [1]
[21]     0.0    0.01    0.01   53733         add_mt(mt_arg*) [21]
                0.01    0.00   54105/587052      wait_mt() [17]
                0.00    0.00  224599/56493420417     get_idx(int, int, int) [4]
-----------------------------------------------
                0.01    0.01    7680/7680        main [10]
[22]     0.0    0.01    0.01    7680         biasing(matrix**, int, matrix*, matrix**) [22]
                0.00    0.00   21681/587052      wait_mt() [17]
                0.00    0.00  165150/911671      push_mt(mt_arg*) [24]
-----------------------------------------------
                0.01    0.00   15360/15360       main [10]
[23]     0.0    0.01    0.00   15360         transpose(matrix*, matrix*) [23]
                0.00    0.00   12961/587052      wait_mt() [17]
                0.00    0.00   97600/911671      push_mt(mt_arg*) [24]
-----------------------------------------------
                0.00    0.00     448/911671      join_mt() [30]
                0.00    0.00   41832/911671      flatten(matrix**, int, matrix*) [28]
                0.00    0.00   53796/911671      matmul(matrix*, matrix*, matrix*) [27]
                0.00    0.00   55324/911671      add(matrix*, matrix*, matrix*) [26]
                0.00    0.00   97600/911671      transpose(matrix*, matrix*) [23]
                0.00    0.00  158463/911671      conv2d(matrix*, matrix**, int, matrix**) [20]
                0.00    0.00  165150/911671      biasing(matrix**, int, matrix*, matrix**) [22]
                0.00    0.00  169195/911671      maxpool(matrix**, int, matrix**) [19]
                0.00    0.00  169863/911671      relu(matrix**, int, matrix**) [18]
[24]     0.0    0.01    0.00  911671         push_mt(mt_arg*) [24]
-----------------------------------------------
                0.01    0.00     240/240         main [10]
[25]     0.0    0.01    0.00     240         free_matrix_ptr(matrix**, int) [25]
                0.00    0.00     960/9360        free_matrix(matrix*) [34]
-----------------------------------------------
                0.00    0.00    7680/7680        main [10]
[26]     0.0    0.00    0.00    7680         add(matrix*, matrix*, matrix*) [26]
                0.00    0.00    7382/587052      wait_mt() [17]
                0.00    0.00   55324/911671      push_mt(mt_arg*) [24]
-----------------------------------------------
                0.00    0.00    7680/7680        main [10]
[27]     0.0    0.00    0.00    7680         matmul(matrix*, matrix*, matrix*) [27]
                0.00    0.00    6989/587052      wait_mt() [17]
                0.00    0.00   53796/911671      push_mt(mt_arg*) [24]
-----------------------------------------------
                0.00    0.00    7680/7680        main [10]
[28]     0.0    0.00    0.00    7680         flatten(matrix**, int, matrix*) [28]
                0.00    0.00    5445/587052      wait_mt() [17]
                0.00    0.00   41832/911671      push_mt(mt_arg*) [24]
-----------------------------------------------
                0.00    0.00    7680/7680        main [10]
[29]     0.0    0.00    0.00    7680         index_of_max_element(matrix*) [29]
                0.00    0.00   84480/56493420417     get_idx(int, int, int) [4]
-----------------------------------------------
                0.00    0.00      60/60          main [10]
[30]     0.0    0.00    0.00      60         join_mt() [30]
                0.00    0.00     448/911671      push_mt(mt_arg*) [24]
-----------------------------------------------
                0.00    0.00     300/9360        main [10]
                0.00    0.00     960/9360        free_matrix_ptr(matrix**, int) [25]
                0.00    0.00    8100/9360        free_io(io*) [40]
[34]     0.0    0.00    0.00    9360         free_matrix(matrix*) [34]
-----------------------------------------------
                0.00    0.00    7800/7800        malloc_io() [11]
[35]     0.0    0.00    0.00    7800         get_value(char const*) [35]
-----------------------------------------------
                0.00    0.00     431/431         start_mt(void*) [1]
[36]     0.0    0.00    0.00     431         stop_mt(mt_arg*) [36]
-----------------------------------------------
                0.00    0.00     360/360         main [10]
[37]     0.0    0.00    0.00     360         stop_timer() [37]
-----------------------------------------------
                0.00    0.00     360/360         main [10]
[38]     0.0    0.00    0.00     360         delta_time_us(timeval, timeval) [38]
-----------------------------------------------
                0.00    0.00     300/300         main [10]
[39]     0.0    0.00    0.00     300         start_timer() [39]
-----------------------------------------------
                0.00    0.00      60/60          main [10]
[40]     0.0    0.00    0.00      60         free_io(io*) [40]
                0.00    0.00    8100/9360        free_matrix(matrix*) [34]
-----------------------------------------------
                0.00    0.00      60/60          main [10]
[41]     0.0    0.00    0.00      60         create_mt(long) [41]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012-2024 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

   [8] biasing_mt(mt_arg*)    [29] index_of_max_element(matrix*) [7] relu_mt(mt_arg*)
  [13] flatten_mt(mt_arg*)    [26] add(matrix*, matrix*, matrix*) [17] wait_mt()
   [9] maxpool_mt(mt_arg*)    [18] relu(matrix**, int, matrix**) [2] conv2d_mt(mt_arg*)
  [37] stop_timer()           [21] add_mt(mt_arg*)        [41] create_mt(long)
  [34] free_matrix(matrix*)   [20] conv2d(matrix*, matrix**, int, matrix**) [35] get_value(char const*)
  [39] start_timer()          [27] matmul(matrix*, matrix*, matrix*) [11] malloc_io()
   [5] get_decimals(int)      [22] biasing(matrix**, int, matrix*, matrix**) [6] matmul_mt(mt_arg*)
  [12] io_to_matrix(char const*) [28] flatten(matrix**, int, matrix*) [23] transpose(matrix*, matrix*)
  [15] transpose_mt(mt_arg*)  [40] free_io(io*)           [36] stop_mt(mt_arg*)
  [38] delta_time_us(timeval, timeval) [4] get_idx(int, int, int) [1] start_mt(void*)
  [14] malloc_matrix(int, int) [30] join_mt()              [3] _init
  [25] free_matrix_ptr(matrix**, int) [19] maxpool(matrix**, int, matrix**) [10] main
  [16] malloc_matrix_ptr(int, int, int) [24] push_mt(mt_arg*)
